document.querySelector("#input-chat").addEventListener("keydown", function (e) {
  if (e.key === "Enter") {
    sendRequest()
    // 获取标题下的第一个条目
    var historyContainer = document.getElementById('chatHistory');
    var firstEntry = historyContainer.children[1]; // 第一个条目（第0个是标题）

    // 获取当前 input-chat 中的内容
    var inputChatContent = document.querySelector("#input-chat").value;

    // 获取当前 res-log 中的内容
    var resLogContent = document.querySelector("#res-log").innerHTML;

    // 获取条目的唯一标识符
    var entryId = firstEntry ? firstEntry.getAttribute('data-name') : null;

    if (entryId) {
      if (/^\d{4}\/\d{1,2}\/\d{1,2} \d{2}:\d{2}:\d{2}$/.test(firstEntry.innerHTML)) {
        // 如果是时间格式
        const newStoreList = [];
        storeMap.set(entryId, newStoreList);
        currentStoreList = newStoreList;
        currentStoreList.length = 0; // 清空数组
        currentStoreList.push(resLogContent); // 更新为当前 res-log 中的内容
        // 将标题下第一个条目的名字改为 input-chat 中的内容
        firstEntry.innerHTML = inputChatContent;
      } else {
        // 如果不是时间格式
        currentStoreList = storeMap.get(entryId) || [];
        currentStoreList.length = 0; // 清空数组
        currentStoreList.push(resLogContent); // 更新为当前 res-log 中的内容
      }
    } else {
      // 如果没有条目
      const newStoreList = [];
      var newHistoryEntry = document.createElement('div');
      newHistoryEntry.className = 'msg-item';
      newHistoryEntry.innerHTML = inputChatContent;
      var now = new Date();
      var newEntryId = 'entry-' + now.getTime(); // 使用时间戳作为唯一标识
      newHistoryEntry.setAttribute('data-name', newEntryId); // 设置唯一标识符
      idToSessionMap.set(newEntryId, session_id);//建立映射
      historyContainer.appendChild(newHistoryEntry);
      storeMap.set(newEntryId, newStoreList);
      currentStoreList = newStoreList;
      currentStoreList.push(resLogContent); // 更新为当前 res-log 中的内容

      // 为新条目添加点击事件监听器
      addClickListener(newHistoryEntry);
    }
    document.querySelector("#input-chat").value = "";
  }
});

document.querySelector("#btn-fold-in").addEventListener("click", (e) => {
  const sidebar = document.querySelector(".sidebar");
  sidebar.style.width = 0

  const btnFoldOut = document.querySelector("#btn-fold-out");
  btnFoldOut.style.display = "inline-block"
})

let currentStoreList = null;
const storeMap = new Map(); // 用于存储条目和对应数组的映射

let session_id = "123";
const idToSessionMap = new Map(); //用于存储条目和对应会话的映射



document.querySelector("#input-send").addEventListener("click", (e) => {
  sendRequest()
  // 获取标题下的第一个条目
  var historyContainer = document.getElementById('chatHistory');
  var firstEntry = historyContainer.children[1]; // 第一个条目（第0个是标题）

  // 获取当前 input-chat 中的内容
  var inputChatContent = document.querySelector("#input-chat").value;

  // 获取当前 res-log 中的内容
  var resLogContent = document.querySelector("#res-log").innerHTML;

  // 获取条目的唯一标识符
  var entryId = firstEntry ? firstEntry.getAttribute('data-name') : null;

  if (entryId) {
    if (/^\d{4}\/\d{1,2}\/\d{1,2} \d{2}:\d{2}:\d{2}$/.test(firstEntry.innerHTML)) {
      // 如果是时间格式
      const newStoreList = [];
      storeMap.set(entryId, newStoreList);
      currentStoreList = newStoreList;
      currentStoreList.length = 0; // 清空数组
      currentStoreList.push(resLogContent); // 更新为当前 res-log 中的内容
      // 将标题下第一个条目的名字改为 input-chat 中的内容
      firstEntry.innerHTML = inputChatContent;
    } else {
      // 如果不是时间格式
      currentStoreList = storeMap.get(entryId) || [];
      currentStoreList.length = 0; // 清空数组
      currentStoreList.push(resLogContent); // 更新为当前 res-log 中的内容
    }
  } else {
    // 如果没有条目
    const newStoreList = [];
    var newHistoryEntry = document.createElement('div');
    newHistoryEntry.className = 'msg-item';
    newHistoryEntry.innerHTML = inputChatContent;
    var now = new Date();
    var newEntryId = 'entry-' + now.getTime(); // 使用时间戳作为唯一标识
    newHistoryEntry.setAttribute('data-name', newEntryId); // 设置唯一标识符
    idToSessionMap.set(newEntryId, session_id);//建立映射
    historyContainer.appendChild(newHistoryEntry);
    storeMap.set(newEntryId, newStoreList);
    currentStoreList = newStoreList;
    currentStoreList.push(resLogContent); // 更新为当前 res-log 中的内容

    // 为新条目添加点击事件监听器
    addClickListener(newHistoryEntry);
  }

  document.querySelector("#input-chat").value = "";
})



document.querySelector("#btn-fold-out").addEventListener("click", (e) => {
  const sidebar = document.querySelector(".sidebar");
  sidebar.style.width = "260px"

  e.target.style.display = "none"
})

function sendRequest() {
  const text = document.querySelector("#input-chat").value
  const data = {
    input: {
      question:text
    },
    config: {
      "configurable": {
        "session_id": session_id
      }
    }
  };

  const resLog = document.querySelector("#res-log")
  const selfMsg = document.createElement("div");
  selfMsg.innerText = text;
  selfMsg.className = "self-msg"
  resLog.appendChild(selfMsg);

  const llmMsg = document.createElement("div");
  const llmMsg_P = document.createElement("p");
  llmMsg.className = "llm-msg"
  llmMsg.appendChild(llmMsg_P);
  resLog.appendChild(llmMsg);

  fetch("http://127.0.0.1:8000/chain/stream_log", {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(data),
  }).then(response => {
    if (response.ok) {
      const reader = response.body.getReader();
      const decoder = new TextDecoder("utf-8");
      const res = llmMsg_P;


      function read() {
        reader.read().then(({ done, value }) => {
          if (done) {
            console.log('Stream closed');
            const llmMsg_toolbar = document.createElement("div");
            llmMsg_toolbar.className = "tool-bar"
            // llmMsg_toolbar.innerHTML = `
            //     <span class="iconfont icon-fuzhi"></span>
            // `
            llmMsg.appendChild(llmMsg_toolbar);
            return;
          }

          const chunk = decoder.decode(value, { stream: true });
          // console.log(1000,chunk.split('\r\n'))
          chunk.split('\r\n').forEach(eventString => {
            // console.log(1000,eventString);
            if (eventString && eventString.startsWith('data: ')) {
              // console.log(2000,eventString);
              const str = eventString.substring("data: ".length);
              const data = JSON.parse(str)
              // console.log(3000,data);
              data.ops.forEach(item => {
                if (item.op === "add" && item.path === "/logs/ChatZhipuAI/streamed_output_str/-") {
                  res.innerHTML += item.value;
                  autoScrollToBottom();
                }
              })
            }
          });


          read();
        }).catch(error => {
          console.error('Stream error', error);
        });
      }

      read();
    } else {
      console.error('Network response was not ok.');
    }
  }).catch(error => {
    console.error('Fetch error:', error);
  });
}

document.getElementById('new-chat').addEventListener('click', function () {
  // 获取标题下的第一个条目
  var historyContainer = document.getElementById('chatHistory');
  var firstEntry = historyContainer.children[1]; // 第一个条目（第0个是标题）

  // 检查第一个条目是否为时间格式
  if (firstEntry && /^\d{4}\/\d{1,2}\/\d{1,2} \d{2}:\d{2}:\d{2}$/.test(firstEntry.innerHTML)) {
    // 如果第一个条目是时间格式，直接返回
    return;
  }

  // 获取当前 res-log 中的内容
  var resLogContent = document.querySelector("#res-log").innerHTML;

  // 清空 currentStoreList 并更新为当前 res-log 中的内容
  currentStoreList.length = 0; // 清空数组
  currentStoreList.push(resLogContent); // 更新为当前 res-log 中的内容

  // 创建一个新的 div 元素
  var newHistoryEntry = document.createElement('div');
  newHistoryEntry.className = 'msg-item';

  // 获取当前时间
  var now = new Date();
  var formattedTime = now.toLocaleString(); // 格式化时间为可读字符串

  newHistoryEntry.innerHTML = formattedTime;
  var entryId = 'entry-' + now.getTime();
  newHistoryEntry.setAttribute('data-name', entryId); // 使用时间戳作为唯一标识

  // 将新的条目插入到标题下面
  var historyTitle = document.getElementById('historyTitle');
  historyContainer.insertBefore(newHistoryEntry, historyTitle.nextSibling);

  // 为新条目添加点击事件监听器
  addClickListener(newHistoryEntry);

  // 清空 res-log 容器中的内容
  document.getElementById('res-log').innerHTML = '';

  createNewSessionId();
  idToSessionMap.set(entryId, session_id);

});


// 为条目添加点击事件监听器的函数
function addClickListener(element) {
  element.addEventListener('click', function () {

    var historyContainer = document.getElementById('chatHistory');
    var firstEntry = historyContainer.children[1]; // 第一个条目（第0个是标题）

    // 检查标题下的第一个条目是否为时间格式
    const isFirstEntryTimeFormat = firstEntry && /^\d{4}\/\d{1,2}\/\d{1,2} \d{2}:\d{2}:\d{2}$/.test(firstEntry.innerHTML);

    if (isFirstEntryTimeFormat) {
      // 如果标题下的第一个条目是时间格式
      if (element !== firstEntry) {
        // 如果点击的条目不是时间格式的条目，删除时间格式的条目
        historyContainer.removeChild(firstEntry);
        firstEntry = historyContainer.children[1]; // 第一个条目（第0个是标题）
        // 获取条目的唯一标识符
        var entryId = element.getAttribute('data-name');
        //切换对话
        session_id = idToSessionMap.get(entryId);
        idToSessionMap.delete(firstEntry.getAttribute('data-name'))
        // 更新 currentStoreList 为点击的条目对应的数组
        currentStoreList = storeMap.get(entryId) || [];
        const associatedArray = storeMap.get(entryId);
        const resLogElement = document.querySelector("#res-log");
        //把当前对话移到最上方
        historyContainer.insertBefore(element, firstEntry);
        // 按原逻辑执行
        if (associatedArray) {
          resLogElement.innerHTML = associatedArray.join('<br>'); // 使用 <br> 分隔内容
        } else {
          resLogElement.innerHTML = '';
        }
      } else {
        return;
      }
    } else {
      // 获取当前 res-log 中的内容
      var resLogContent = document.querySelector("#res-log").innerHTML;
      currentStoreList.length = 0; // 清空数组
      currentStoreList.push(resLogContent); // 更新为当前 res-log 中的内容

      // 获取条目的唯一标识符
      var entryId = element.getAttribute('data-name');
      //切换对话
      session_id = idToSessionMap.get(entryId);

      // 更新 currentStoreList 为点击的条目对应的数组
      currentStoreList = storeMap.get(entryId) || [];

      const associatedArray = storeMap.get(entryId);
      const resLogElement = document.querySelector("#res-log");

      if (element === firstEntry) {
        // 将currentStoreList的内容放入 res-log
        resLogElement.innerHTML = currentStoreList.join('<br>'); // 使用 <br> 分隔内容
      } else {
        //把当前对话移到最上方
        historyContainer.insertBefore(element, firstEntry);

        // 按原逻辑执行
        if (associatedArray) {
          resLogElement.innerHTML = associatedArray.join('<br>'); // 使用 <br> 分隔内容
        } else {
          resLogElement.innerHTML = '';
        }
      }
    }
  });
}

function autoScrollToBottom() {
  var resLog = document.getElementById('res-log');
  resLog.scrollTop = resLog.scrollHeight;
}

document.addEventListener('DOMContentLoaded', function () {
  autoScrollToBottom();
});

// 生成新的 session_id
function createNewSessionId() {
  session_id = uuid.v4();
}
